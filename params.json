{
  "name": "Ios-rdc-quickstart",
  "tagline": "How to get started with the iOS Real Device Cloud.",
  "body": "# Quick Start to the Sauce Labs iOS Real Device Cloud\r\n\r\nWe're proud to present the new Sauce Labs Real Device Cloud. Now, you\r\ncan test your apps and websites on actual iOS devices like the iPhone 6. \r\n\r\nWe can do it because we've hooked real iOS devices up to the cloud, and made them\r\nrun your tests just like iOS simulators... almost.\r\n\r\nTo get you started, we've put together some sample tests, with a sample app, that you can try -- right now --\r\nwith your own Sauce Labs account.\r\n\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n**Table of Contents** \r\n\r\n- [Running the example tests](#running-the-example-tests)\r\n  - [Environment variables](#environment-variables)\r\n    - [Linux or Mac OS X users](#linux-or-mac-os-x-users)\r\n    - [Windows users](#windows-users)\r\n  - [Install test libraries](#install-test-libraries)\r\n  - [How to run the tests](#how-to-run-the-tests)\r\n- [How to write your own tests](#how-to-write-your-own-tests)\r\n  - [Web tests](#web-tests)\r\n  - [App tests](#app-tests)\r\n    - [Building](#building)\r\n    - [Uploading](#uploading)\r\n    - [Provisioning](#provisioning)\r\n- [Where to find out more](#where-to-find-out-more)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n\r\n## Running the example tests\r\n\r\nSauce Labs works with Selenium libraries in any language, but the examples here\r\nare (for now) just in Python. So you'll need to be familiar with running scripts \r\non the command line, and have Python 2.x or better installed.\r\n\r\nTo get these scripts to work, first you'll need a couple of environment variables. \r\n\r\n### Environment variables\r\n\r\n`SAUCE_USERNAME` should be the \r\nusername you use to log into [https://saucelabs.com/](http://saucelabs.com/). \r\n\r\n`SAUCE_ACCESS_KEY` should be the \"access key\" that Sauce assigned to you. To find it, first log into\r\nyour account on the Sauce Labs website.\r\n* If you're using the new interface (it looks blue), click on your user account in the bottom left-hand\r\n  corner. This should pop open a menu. Click on **User Settings**. This opens your User Settings page. \r\n  Scroll down to find your Access Key.\r\n* In the old interface (it looks more red and yellow), the Access Key is in the grey column on the \r\n  left hand side.\r\n\r\n\r\n#### Linux or Mac OS X users\r\n\r\nType these commands:\r\n\r\n```bash\r\nexport SAUCE_USERNAME=your_username\r\nexport SAUCE_ACCESS_KEY=your_access_key\r\n```\r\n\r\nYou might want to add these lines to your shell's startup profile, which for most people\r\nis in their home directory under `.bash_profile`.\r\n\r\n#### Windows users\r\n\r\nType these commands:\r\n\r\n```\r\nset SAUCE_USERNAME=your_username\r\nset SAUCE_ACCESS_KEY=your_access_key\r\n```\r\n\r\nYou might want to add this to your default environment variables.\r\n\r\n### Install test libraries\r\n\r\nIf you use Sauce already, you almost certainly have this stuff, but in case you are \r\non a fresh machine: in the shell, enter the directory where you installed these files.\r\nAnd then, install dependencies with `pip install -r requirements.txt`.\r\n\r\n### How to run the tests\r\n\r\nLog into your account on Sauce Labs. It's not necessary, but it's just interesting to watch the tests\r\nprogress.\r\n\r\nIn a shell, enter the directory containing the test files. To run the tests, just type `nosetests -vv`. \r\n\r\n`nosetests` will find anything that looks like a test and run it. It may take a while before you\r\nsee anything, but soon you'll see tests running, in your shell and in the web interface for your account!\r\n\r\n\r\n\r\n## How to write your own tests\r\n\r\nHopefully that worked (if it didn't, see the contact info below) and you're interested in writing your own\r\ntests now. Let's have a look at these example tests for clues about how to write your own.\r\n\r\n### Web tests\r\n\r\nTo start, let's look at `test_web.py`, and see what's happening. \r\n\r\n`test_web` peforms a simple test of a web page, on two different platforms; an iPhone 6 simulator, and \r\nan iPhone 6. The `@on_platforms` decorator is just a handy way of running the same test on various platforms.\r\n\r\nAs you can see, the `capabilities` for a real device are very similar to those for a simulator. \r\nThe only difference is that instead of saying `\"deviceName\": \"iPhone 6\"`, you use `\"deviceName\": \"iPhone 6 Device\"`.\r\n\r\nAnd that's just about it. There isn't much that's different for a web test between platforms.\r\n\r\nThe one thing to watch out for is that we haven't yet released [Sauce Connect](https://wiki.saucelabs.com/display/DOCS/Using+Sauce+Connect+for+Testing+Behind+the+Firewall+or+on+Localhost) for iOS \r\nReal Devices. But it's on the way! Check with Sauce Labs for updates.\r\n\r\n### App tests\r\n\r\nPop open the file `test_app.py` and have a look!\r\n\r\nThis performs a really simple test on a simple app. The app has two views, and the test just clicks on \r\none button and checks if the view has changed.\r\n\r\nYou specify a real device in your capabilities just like the web test - `\"deviceName\": \"iPhone 6 Device\"`. \r\n\r\nYou put the app in `\"app\"`, but there are a few things to watch out for:\r\n\r\n#### Building\r\n\r\nUp till now you've probably only been uploading simulator apps to Sauce Labs. But if you run your app on a real iOS device, it \r\nhas to be compiled and archived specially for one.\r\n\r\nWe can't go into a full discussion of how to compile iOS apps, but here are some tips to get you started:\r\n\r\n* You can make a `.app` directory or an `.ipa`. (See the **Uploading** section).\r\n* If you are using Apple's development IDE, XCode, you will have to create a \"scheme\" which archives the application to a file. Then\r\n  use that as your app file. Here's where to start in Apple's documentation: \r\n  * [XCode Overview: Building Your App](https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/BuildingYourApp.html) \r\n  * [XCode Help: Archiving Your Application](https://developer.apple.com/library/ios/recipes/xcode_help-scheme_editor/Articles/SchemeArchive.html) \r\n* If you are building with the command-line tool, `xcodebuild`, the arguments should include:\r\n\r\n  `-arch armv7 -sdk iphoneos`\r\n\r\n  This StackOverflow post, \r\n  [xcodebuild simulator or device?](http://stackoverflow.com/questions/5010062/xcodebuild-simulator-or-device) may also help.\r\n\r\n\r\n#### Uploading\r\n\r\nSauce Labs can accept your app in two formats.\r\n\r\n  * As an IPA archive, whose filename must end in `.ipa`; or\r\n  * A zipped `.app` directory, whose filename must end in `.zip`.\r\n\r\nThe big difference from simulator tests is that you have to upload a real device iOS app to \r\n[Sauce Storage](https://wiki.saucelabs.com/display/DOCS/Using+Sauce+Storage+for+Test+Assets) first. And\r\nthen, to test the app you just uploaded, use a `sauce-storage:` URL as the `app` property in the capabilities.\r\n\r\nFor instance, if your app is called `your_app.zip`, you would upload it to Sauce Storage, and then in the capabilities for \r\nyour test you would use `app: \"sauce-storage:your_app.zip\"`.\r\n\r\nSauce Storage is a convenient place to temporarily store files that your tests will need. Rather than waste time and bandwidth\r\ntransferring the file over to us for every test, you can just upload it to us once, in a secure, private area.\r\n\r\nIf you want to upload the app yourself ahead of time, the `saucestorage` helper library, included here, could be of use. Or, \r\nuse a simple shell command with `curl`. See the [Sauce Storage API documentation](https://wiki.saucelabs.com/display/DOCS/Temporary+Storage+Methods). \r\n\r\nIf you write tests in Python, we've made it extra easy with the helpers in this package. `sauce_storage_upload(\"path/to/your_app.zip\")` will upload \r\nthe file and return the correct `sauce-storage:` URL.\r\n\r\n\r\n#### Provisioning\r\n\r\nHere's a thing you *don't* have to worry about, but in case you have questions:\r\n\r\nYou may already be aware that iOS apps in development won't run on just any device. They need to be \"provisioned\" for that device, first. \r\nBut you don't have to do anything special to ensure your apps are \"provisioned\" for our iOS Devices. We've taken care of all that\r\nby re-provisioning your apps for our devices, on the fly. \r\n\r\nLong story short: if you can run your app on an iOS real device, so can we. \r\n\r\n\r\n## Where to find out more\r\n\r\nWe're still producing supporting materials for the iOS Real Device Cloud, so if you have any questions contact [Chiarng Lin](mailto:chiarng@saucelabs.com) \r\nor [Neil Manvar](mailto:neil@saucelabs.com).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}